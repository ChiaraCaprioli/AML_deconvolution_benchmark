}
}
}
#Eval.matrix = NULL
for (c in unique(merged$`cell type`)) {
L <- list()
for (meth in unique(merged$method)) {
if (grepl(pattern = "DWLS", meth)) {
df <- merged %>%
filter(
method == meth,
`cell type` == c
)
eval <- data.frame(
`cell type` = c,
method = meth,
RMSD = round(sqrt(mean((df$observed - df$estimated)^2)), digits = 5),
mAD = round(mean(abs(df$observed - df$estimated)), digits = 5),
Pearson = round(cor(c(df$observed), c(df$estimated)), digits = 4)
)
L[[meth]] <- eval
#Eval.matrix = rbind(Eval.matrix, eval)
}
if (grepl(pattern = "MuSiC", meth)) {
for (n in unique(merged$normalization)) {
for (m in unique(merged$markers)) {
if (!is.na(m)) {
df <- merged %>%
filter(
method == meth,
normalization == n,
markers == m,
`cell type` == c
)
eval <- data.frame(
`cell type` = c,
method = meth,
normalization = n,
markers = m,
RMSD = round(sqrt(mean((df$observed - df$estimated)^2)), digits = 5),
mAD = round(mean(abs(df$observed - df$estimated)), digits = 5),
Pearson = round(cor(c(df$observed), c(df$estimated)), digits = 4)
)
L[[meth]] <- eval
#Eval.matrix = rbind(Eval.matrix, eval)
}
}
}
}
}
Eval.matrix <- Reduce(full_join, L)
}
Eval.matrix
#Eval.matrix = NULL
for (c in unique(merged$`cell type`)) {
L <- list()
for (meth in unique(merged$method)) {
if (grepl(pattern = "DWLS", meth)) {
df <- merged %>%
filter(
method == meth,
`cell type` == c
)
eval <- data.frame(
`cell type` = c,
method = meth,
RMSD = round(sqrt(mean((df$observed - df$estimated)^2)), digits = 5),
mAD = round(mean(abs(df$observed - df$estimated)), digits = 5),
Pearson = round(cor(c(df$observed), c(df$estimated)), digits = 4)
)
L[[meth]] <- eval
#Eval.matrix = rbind(Eval.matrix, eval)
}
if (grepl(pattern = "MuSiC", meth)) {
for (n in unique(merged$normalization)) {
for (m in unique(merged$markers)) {
if (!is.na(m)) {
df <- merged %>%
filter(
method == meth,
normalization == n,
markers == m,
`cell type` == c
)
eval <- data.frame(
`cell type` = c,
method = meth,
normalization = n,
markers = m,
RMSD = round(sqrt(mean((df$observed - df$estimated)^2)), digits = 5),
mAD = round(mean(abs(df$observed - df$estimated)), digits = 5),
Pearson = round(cor(c(df$observed), c(df$estimated)), digits = 4)
)
L[[meth]] <- eval
#Eval.matrix = rbind(Eval.matrix, eval)
}
Eval.matrix <- Reduce(full_join, L)
}
}
}
}
}
Eval.matrix
#Eval.matrix = NULL
for (c in unique(merged$`cell type`)) {
L <- list()
for (meth in unique(merged$method)) {
if (grepl(pattern = "DWLS", meth)) {
df <- merged %>%
filter(
method == meth,
`cell type` == c
)
eval <- data.frame(
`cell type` = c,
method = meth,
RMSD = round(sqrt(mean((df$observed - df$estimated)^2)), digits = 5),
mAD = round(mean(abs(df$observed - df$estimated)), digits = 5),
Pearson = round(cor(c(df$observed), c(df$estimated)), digits = 4)
)
L[[meth]] <- eval
#Eval.matrix = rbind(Eval.matrix, eval)
}
if (grepl(pattern = "MuSiC", meth)) {
for (n in unique(merged$normalization)) {
for (m in unique(merged$markers)) {
if (!is.na(m)) {
df <- merged %>%
filter(
method == meth,
normalization == n,
markers == m,
`cell type` == c
)
eval <- data.frame(
`cell type` = c,
method = meth,
normalization = n,
markers = m,
RMSD = round(sqrt(mean((df$observed - df$estimated)^2)), digits = 5),
mAD = round(mean(abs(df$observed - df$estimated)), digits = 5),
Pearson = round(cor(c(df$observed), c(df$estimated)), digits = 4)
)
L[[meth]][[n]][[m]][[c]] <- eval
#Eval.matrix = rbind(Eval.matrix, eval)
}
}
}
}
}
Eval.matrix <- Reduce(full_join, L)
}
for (c in unique(merged$`cell type`)) {
L <- list()
for (meth in unique(merged$method)) {
if (grepl(pattern = "DWLS", meth)) {
df <- merged %>%
filter(
method == meth,
`cell type` == c
)
eval <- data.frame(
`cell type` = c,
method = meth,
RMSD = round(sqrt(mean((df$observed - df$estimated)^2)), digits = 5),
mAD = round(mean(abs(df$observed - df$estimated)), digits = 5),
Pearson = round(cor(c(df$observed), c(df$estimated)), digits = 4)
)
L[[meth]] <- eval
#Eval.matrix = rbind(Eval.matrix, eval)
}
}
}
L
for (c in unique(merged$`cell type`)) {
L <- list()
for (meth in unique(merged$method)) {
if (grepl(pattern = "DWLS", meth)) {
df <- merged %>%
filter(
method == meth,
`cell type` == c
)
eval <- data.frame(
`cell type` = c,
method = meth,
RMSD = round(sqrt(mean((df$observed - df$estimated)^2)), digits = 5),
mAD = round(mean(abs(df$observed - df$estimated)), digits = 5),
Pearson = round(cor(c(df$observed), c(df$estimated)), digits = 4)
)
L[[meth]][[c]] <- eval
#Eval.matrix = rbind(Eval.matrix, eval)
}
}
}
L
for (meth in unique(merged$method)) {
if (grepl(pattern = "DWLS", meth)) {
L <- lapply(unique(merged$`cell type`), function(c){
df <- merged %>%
filter(
method == meth,
`cell type` == c
)
eval <- data.frame(
`cell type` = c,
method = meth,
RMSD = round(sqrt(mean((df$observed - df$estimated)^2)), digits = 5),
mAD = round(mean(abs(df$observed - df$estimated)), digits = 5),
Pearson = round(cor(c(df$observed), c(df$estimated)), digits = 4)
)
})
#Eval.matrix = rbind(Eval.matrix, eval)
}
}
L
View(merged)
# Performance by cell type across samples
x <- reshape2::melt(est_prop)
x
x$L2 %>% unique()
head(x)
?melt
?reshape2::melt
x$L2 %>% unique()
#x$normalization <- word(x$L2, 1, sep = fixed('.'))
#x$markers <- word(x$L2, 2, sep = fixed('.'))
#x$L2 <- NULL
#colnames(x) <- c("sample", "cell type", "estimated", "method", "normalization", "markers")
colnames(x) <- c("sample", "cell type", "estimated", "method1", "method2")
# Performance by cell type across samples
x <- reshape2::melt(est_prop)
#x$normalization <- word(x$L2, 1, sep = fixed('.'))
#x$markers <- word(x$L2, 2, sep = fixed('.'))
#x$L2 <- NULL
#colnames(x) <- c("sample", "cell type", "estimated", "method", "normalization", "markers")
colnames(x) <- c("sample", "cell type", "estimated", "method1", "method2")
y <- reshape2::melt(real_prop)
colnames(y) <- c("sample", "cell type", "observed")
merged <- full_join(x,y)
# Performance by cell type across samples
x <- reshape2::melt(est_prop)
x$L2 %>% unique()
x$L1 %>% unique()
x$method <- paste(x$L1, x$L2, sep = "_")
head(x)
#x$normalization <- word(x$L2, 1, sep = fixed('.'))
#x$markers <- word(x$L2, 2, sep = fixed('.'))
#x$L1 <- NULL
#x$L2 <- NULL
#colnames(x) <- c("sample", "cell type", "estimated", "method", "normalization", "markers")
colnames(x) <- c("sample", "cell type", "estimated", "method1", "method2")
# Performance by cell type across samples
x <- reshape2::melt(est_prop)
x$method <- paste(x$L1, x$L2, sep = "_")
#x$normalization <- word(x$L2, 1, sep = fixed('.'))
#x$markers <- word(x$L2, 2, sep = fixed('.'))
#x$L1 <- NULL
#x$L2 <- NULL
#colnames(x) <- c("sample", "cell type", "estimated", "method", "normalization", "markers")
colnames(x) <- c("sample", "cell type", "estimated", "method")
y <- reshape2::melt(real_prop)
colnames(y) <- c("sample", "cell type", "observed")
merged <- full_join(x,y)
x <- reshape2::melt(est_prop)
x$method <- paste(x$L1, x$L2, sep = "_")
#x$normalization <- word(x$L2, 1, sep = fixed('.'))
#x$markers <- word(x$L2, 2, sep = fixed('.'))
x$L1 <- NULL
x$L2 <- NULL
#colnames(x) <- c("sample", "cell type", "estimated", "method", "normalization", "markers")
colnames(x) <- c("sample", "cell type", "estimated", "method")
y <- reshape2::melt(real_prop)
colnames(y) <- c("sample", "cell type", "observed")
merged <- full_join(x,y)
Eval.matrix <- NULL
for (m in unique(merged$method)) {
for (c in unique(merged$`cell type`)) {
df <- merged %>%
filter(
method1 == m1,
method2 == m2,
`cell type` == c
)
eval <- data.frame(
`cell type` = c,
method = meth,
RMSD = round(sqrt(mean((df$observed - df$estimated)^2)), digits = 5),
mAD = round(mean(abs(df$observed - df$estimated)), digits = 5),
Pearson = round(cor(c(df$observed), c(df$estimated)), digits = 4)
)
Eval.matrix = rbind(Eval.matrix, eval)
}
}
Eval.matrix <- NULL
for (m in unique(merged$method)) {
for (c in unique(merged$`cell type`)) {
df <- merged %>%
filter(
method == m,
`cell type` == c
)
eval <- data.frame(
`cell type` = c,
method = meth,
RMSD = round(sqrt(mean((df$observed - df$estimated)^2)), digits = 5),
mAD = round(mean(abs(df$observed - df$estimated)), digits = 5),
Pearson = round(cor(c(df$observed), c(df$estimated)), digits = 4)
)
Eval.matrix = rbind(Eval.matrix, eval)
}
}
Eval.matrix
length(unique(merged$`cell type`))*length(unique(merged$method))
unique(Eval.matrix$method)
unique(Eval.matrix$method)
Eval.matrix
L1 <- list()
L <- list()
for (m in unique(merged$method)) {
for (c in unique(merged$`cell type`)) {
df <- merged %>%
filter(
method == m,
`cell type` == c
)
eval <- data.frame(
`cell type` = c,
method = meth,
RMSD = round(sqrt(mean((df$observed - df$estimated)^2)), digits = 5),
mAD = round(mean(abs(df$observed - df$estimated)), digits = 5),
Pearson = round(cor(c(df$observed), c(df$estimated)), digits = 4)
)
L[[c]] <-  eval
}
L1[[m]] <- do.call(rbind, L)
}
Eval.matrix <- do.call(rbind, L1)
Eval.matrix
L1 <- list()
L <- list()
for (m in unique(merged$method)) {
for (c in unique(merged$`cell type`)) {
df <- merged %>%
filter(
method == m,
`cell type` == c
)
eval <- data.frame(
`cell type` = c,
method = m,
RMSD = round(sqrt(mean((df$observed - df$estimated)^2)), digits = 5),
mAD = round(mean(abs(df$observed - df$estimated)), digits = 5),
Pearson = round(cor(c(df$observed), c(df$estimated)), digits = 4)
)
L[[c]] <-  eval
}
L1[[m]] <- do.call(rbind, L)
}
Eval.matrix <- do.call(rbind, L1)
Eval.matrix
Eval.matrix <- NULL
for (m in unique(merged$method)) {
for (c in unique(merged$`cell type`)) {
df <- merged %>%
filter(
method == m,
`cell type` == c
)
eval <- data.frame(
`cell type` = c,
method = m,
RMSD = round(sqrt(mean((df$observed - df$estimated)^2)), digits = 5),
mAD = round(mean(abs(df$observed - df$estimated)), digits = 5),
Pearson = round(cor(c(df$observed), c(df$estimated)), digits = 4)
)
Eval.matrix <- rbind(Eval.matrix, eval)
}
}
Eval.matrix
Eval.matrix$method %>% unique()
word(Eval.matrix$method, 1, sep = fixed('_'))
word(Eval.matrix$method, 2, sep = fixed('_'))
word(Eval.matrix$method, 2, sep = fixed('.'))
Eval.matrix$method %>% unique()
separate(Eval.matrix, method, into = c("m1", "m2"), sep = "_")
separate(Eval.matrix, method, into = c("m1", "m2"), sep = "_", extra = "merge")
Eval.matrix %>%
separate(method, into = c("method", "m2"), sep = "_", extra = "merge") %>%
separate("m2", into = c("normalization", "markers"), sep = "_", extra = "merge")
Eval.matrix %>%
separate(method, into = c("method", "m2"), sep = "_", extra = "merge") %>%
separate("m2", into = c("normalization", "markers"), sep = ".", extra = "merge")
Eval.matrix %>%
separate(method, into = c("method", "m2"), sep = "_", extra = "merge") %>%
separate("m2", into = c("normalization", "markers"), sep = ".")
foo <- Eval.matrix %>%
separate(method, into = c("method", "m2"), sep = "_", extra = "merge")
foo
word(foo$m2, 1, sep = fixed('.'))
word(foo$m2, 2, sep = fixed('.'))
foo %>%
separate("m2", into = c("normalization", "markers"), sep = ".")
Eval.matrix <- NULL
for (m in unique(merged$method)) {
for (c in unique(merged$`cell type`)) {
df <- merged %>%
filter(
method == m,
`cell type` == c
)
eval <- data.frame(
`cell type` = c,
method = m,
RMSD = round(sqrt(mean((df$observed - df$estimated)^2)), digits = 5),
mAD = round(mean(abs(df$observed - df$estimated)), digits = 5),
Pearson = round(cor(c(df$observed), c(df$estimated)), digits = 4)
)
Eval.matrix <- rbind(Eval.matrix, eval)
}
}
foo <- Eval.matrix %>%
separate(method, into = c("method", "m2"), sep = "_", extra = "merge")
foo$normalization <- word(foo$m2, 1, sep = fixed('.'))
foo$markers <- word(foo$m2, 2, sep = fixed('.'))
foo$m2 <- NULL
view(foo)
foo %>%
ggplot(aes(x = method, y = Pearson)) +
geom_boxplot() +
theme_bw() +
facet_wrap(~cell.type,normalization, markers)
foo %>%
ggplot(aes(x = method, y = Pearson)) +
geom_boxplot() +
theme_bw() +
facet_wrap(~c(cell.type,normalization))
foo %>%
ggplot(aes(x = method, y = Pearson)) +
geom_boxplot() +
theme_bw() +
facet_wrap(facets = c(foo$cell.type, foo$normalization))
foo %>%
ggplot(aes(x = method, y = Pearson)) +
geom_boxplot() +
theme_bw() +
facet_wrap(facets = normalization)
foo %>%
ggplot(aes(x = method, y = Pearson)) +
geom_boxplot() +
theme_bw() +
facet_wrap(~normalization)
foo %>%
ggplot(aes(x = method, y = Pearson)) +
geom_boxplot() +
theme_bw() +
facet_wrap(~normalization + cell.type)
foo %>%
ggplot(aes(x = cell.type, y = Pearson)) +
geom_boxplot() +
theme_bw() +
facet_wrap(~method + normalization)
foo %>%
ggplot(aes(x = cell.type, y = Pearson)) +
geom_boxplot() +
theme_bw() +
facet_wrap(~method + normalization + markers)
?facet_wrap
foo %>%
ggplot(aes(x = cell.type, y = Pearson)) +
geom_boxplot() +
theme_bw() +
facet_wrap(~method + normalization + markers,
ncol = 2,
strip.position = c("right", "top", "top"))
foo %>%
ggplot(aes(x = cell.type, y = Pearson)) +
geom_boxplot() +
theme_bw() +
facet_wrap(~method + normalization,
ncol = 2)
foo %>%
ggplot(aes(x = cell.type, y = Pearson)) +
geom_boxplot() +
theme_bw() +
facet_grid(method~cell.type)
foo %>%
ggplot(aes(x = cell.type, y = Pearson)) +
geom_boxplot() +
theme_bw() +
facet_grid(method~normalization)
foo %>%
ggplot(aes(x = cell.type, y = Pearson)) +
geom_boxplot() +
theme_bw() +
facet_grid(normalization~method)
foo %>%
ggplot(aes(x = cell.type, y = Pearson)) +
geom_boxplot() +
theme_bw() +
facet_grid(normalization~method~markers)
foo %>%
ggplot(aes(x = cell.type, y = Pearson)) +
geom_boxplot() +
theme_bw() +
facet_grid(markers~normalization~method)
foo %>%
ggplot(aes(x = cell.type, y = Pearson)) +
geom_boxplot() +
theme_bw() +
facet_grid(markers~normalization~method, drop = T)
?facet_grid
