---
title: "BisqueRNA - Cell type deconvolution"
author: "Chiara Caprioli"
date: "10 Dec 2023"
---
# Libraries
# install.packages("BisqueRNA")
library(BisqueRNA)
library(Seurat)
library(Biobase)
library(tidyverse)
# Utils
wdir <- "~/Desktop/working/bulk_ct_deconvolution/"
source(paste0(wdir, "utils.R"))
outdir <- paste0(wdir, "deconvolution/BisqueRNA/")
if (!dir.exists(outdir)) {
dir.create(outdir)
}
outdir2 <- paste0(wdir, "deconvolution/results")
# Data preparation
## Bulk
pb_summed <- readRDS(paste0(wdir, "sc_reference/pb_data_sample_es_summed.rds"))
pb_tpm <- readRDS(paste0(wdir, "sc_reference/pb_data_sample_es_tpm.rds"))
## List of bulk matrices
list_bulk <- list("summed" = pb_summed, "tpm" = pb_tpm)
## Single-cell
sc_reference_sample_es <- readRDS(paste0(wdir, "sc_reference/sc_reference_sample_es.rds"))
## Markers
sc_ct_markers <- read_csv(paste0(wdir, "sc_reference/sc_ct_markers.csv"))
selected_markers <- sc_ct_markers %>%
filter(p_val_adj < 0.05 & avg_log2FC > 2)
list_markers <- list("no_markers" = NULL, "with_markers" = unique(selected_markers$gene))
L_bulk = list_bulk
sc.eset = sc_reference_sample_es
L_markers = list_markers
m = names(L_markers)[1]
m
i = names(L_bulk)[1]
i
est.prop <- ReferenceBasedDecomposition(
bulk.eset = L_bulk[[i]],
sc.eset = sc.eset,
markers = L_markers[[m]],
cell.types = "cellType",
subject.names = "SubjectName",
use.overlap = F,
verbose = F,
old.cpm = TRUE
)
names(est.prop)[1] <- paste(i,m,sep = "_")
est.prop$summed_no_markers
t(est.prop[1])
est.prop$summed_no_markers %>% t()
est.prop[[1]]
t(est.prop[[1]])
est.prop[1] <- t(est.prop[[1]])
est.prop$summed_no_markers
est.prop <- ReferenceBasedDecomposition(
bulk.eset = L_bulk[[i]],
sc.eset = sc.eset,
markers = L_markers[[m]],
cell.types = "cellType",
subject.names = "SubjectName",
use.overlap = F,
verbose = F,
old.cpm = TRUE
)
names(est.prop)[1] <- paste(i,m,sep = "_")
est.prop[[1]]
est.prop[1]
foo <- est.prop
foo$sc.props
foo[[1]]
t(foo[[1]])
foo[1]
foo[1] <- t(foo[[1]])
foo[1] <- foo[[1]]
foo <- est.prop
length(est.prop)
foo[6] <- est.prop[[1]]
foo <- est.prop
t_foo <- t(foo[[1]])
t_foo
est.prop <- ReferenceBasedDecomposition(
bulk.eset = L_bulk[[i]],
sc.eset = sc.eset,
markers = L_markers[[m]],
cell.types = "cellType",
subject.names = "SubjectName",
use.overlap = F,
verbose = F,
old.cpm = TRUE
)
list(est.prop[[1]])
est.prop[[1]]
foo <- est.prop
foo[1] <- list(t(foo[[1]]))
foo$bulk.props
names(foo)[1] <- paste(i,m,sep = "_")
foo$summed_no_markers
BenchmarkBisqueRefBased <- function(L_bulk, sc.eset, L_markers) {
L_final <- list()
for (i in names(L_bulk)) {
L_prop <- list()
for (m in names(L_markers)) {
if (m == "no_markers") {
message(
glue::glue(
"{format(Sys.time(), '[%Y-%m-%d %H:%M:%S]')} Running Bisque with {i} counts and no markers"
)
)
}
if (m == "with_markers") {
message(
glue::glue(
"{format(Sys.time(), '[%Y-%m-%d %H:%M:%S]')} Running Bisque with {i} counts and markers"
)
)
}
est.prop <- ReferenceBasedDecomposition(
bulk.eset = L_bulk[[i]],
sc.eset = sc.eset,
markers = L_markers[[m]],
cell.types = "cellType",
subject.names = "SubjectName",
use.overlap = F,
verbose = F,
old.cpm = TRUE
)
est.prop[1] <- list(t(est.prop[[1]])) # set samples as rows to be consistent with other tools
names(est.prop)[1] <- paste(i,m,sep = "_")
L_prop[[m]] <- est.prop[1]
}
L_final[[i]] <- L_prop
}
L_save <- do.call(c, unlist(L_final, recursive = F, use.names = T))
L_names <- list()
for (i in names(L_save)) {
x = paste(word(i, 1, sep = fixed('.')), word(i, 2, sep = fixed('.')), sep = ".")
L_names[[i]] <- x
}
names(L_save) <- unlist(L_names)
return(L_save)
}
## Reference-based decomposition
refbased_est_prop <- BenchmarkBisqueRefBased(
L_bulk = list_bulk,
sc.eset = sc_reference_sample_es,
L_markers = list_markers
)
refbased_est_prop$summed.no_markers
saveRDS(refbased_est_prop, paste0(outdir2, "/Bisque.refbased_proportions.rds"))
suppressPackageStartupMessages({
library(tidyverse)
library(MuSiC)
library(ggpubr)
library(ComplexHeatmap)
})
wdir <- "/Users/ieo4874/Desktop/working/bulk_ct_deconvolution/"
source(paste0(wdir, "utils.R"))
path_res <- paste0(wdir, "deconvolution/results/")
outdir <- paste0(wdir, "benchmarking/results/")
colors <- list()
colors$metric <- setNames(
c(RColorBrewer::brewer.pal(9,"Greys")[c(3,5,7)]),
c("R", "RMSD", "mAD")
)
ct_levels <- c("HSC_MPP", "Early_myeloid", "Late_myeloid", "Erythroid", "Eo_baso_mast", "Mono", "DC", "T_CD4", "T_CD8", "NK_cells", "B_early", "B_mature")
# Load real proportions
real_prop <- readRDS(paste0(wdir, "sc_reference/pb_data_sample.rds"))
real_prop <- real_prop$prop.real
# Load estimated proportions
est_prop <- LoadDeconvolutionResults(path = path_res)
est_prop$DWLS$summed
est_prop$Bisque.refbased$summed.no_markers
eval_cross_modalities <- Eval_multi(
prop.real = data.matrix(real_prop),
prop.est = c(est_prop$Bisque.refbased, est_prop$DWLS, est_prop$MuSiC.direct, est_prop$MuSiC.recursive),
method.name = c(
paste(names(est_prop)[1], names(est_prop[[1]]), sep = "_"),
paste(names(est_prop)[2], names(est_prop[[2]]), sep = "_"),
paste(names(est_prop)[3], names(est_prop[[3]]), sep = "_"),
paste(names(est_prop)[4], names(est_prop[[4]]), sep = "_")
)
)
write.table(eval_cross_modalities, paste0(outdir, "/global_performance.tsv"), row.names = T)
eval_cross_modalities
p <- eval_cross_modalities %>%
as.data.frame() %>%
rownames_to_column(var = "method") %>%
pivot_longer(2:ncol(.), names_to = "metric", values_to = "value") %>%
ggplot(aes(x = method, y = value, fill = metric)) +
geom_col(position = "dodge", color = "black", linewidth = 0.3) +
xlab("Method") + ylab("Score") +
scale_x_discrete(limits=rev) +
scale_fill_manual(name = "Metric", values = colors$metric) +
theme_bw() +
theme(
panel.grid = element_blank(),
aspect.ratio = 1,
axis.title.y = element_blank(),
axis.text = element_text(color = "black")
) +
coord_flip()
ggsave(paste0(outdir, "global_performance.png"), p, width = 7, height = 5)
# Compute R, RMSD and mAD by method and cell type across samples
x <- reshape2::melt(est_prop)
x$method <- paste(x$L1, x$L2, sep = "_")
x$L1 <- NULL
x$L2 <- NULL
colnames(x) <- c("sample", "cell type", "estimated", "method")
y <- reshape2::melt(real_prop)
colnames(y) <- c("sample", "cell type", "observed")
merged <- full_join(x,y)
merged$`cell type` <- factor(merged$`cell type`, levels = ct_levels)
Eval.matrix <- NULL
L_plots <- list()
for (c in levels(merged$`cell type`)) {
for (m in unique(merged$method)) {
df <- merged %>%
filter(
method == m,
`cell type` == c
)
eval <- data.frame(
`cell type` = c,
method = m,
RMSD = round(sqrt(mean((df$observed - df$estimated)^2)), digits = 5),
mAD = round(mean(abs(df$observed - df$estimated)), digits = 5),
R = round(cor(c(df$observed), c(df$estimated), method = "pearson"), digits = 4)
)
Eval.matrix <- rbind(Eval.matrix, eval)
}
}
# Boxplot by method and metric
p <- Eval.matrix %>%
pivot_longer(cols = c(R, RMSD, mAD), names_to = "metric", values_to = "score") %>%
mutate(metric = factor(metric, levels = c("R", "RMSD", "mAD"))) %>%
ggplot(aes(x = method, y = score, fill = metric)) +
geom_boxplot(position = "dodge", outlier.size = 0, outlier.alpha = 0) +
scale_x_discrete(limits=rev) +
scale_fill_manual(name = "Metric", values = colors$metric) +
theme_bw() +
ylab("Score") +
coord_flip() +
theme(
panel.grid = element_blank(),
axis.title.y = element_blank(),
aspect.ratio = 1,
axis.text = element_text(color = "black")
)
ggsave(paste0(outdir, "ct_performance.png"), p, width = 7, height = 5)
# Dotplot by cell type, sample and method
df <- full_join(merged, Eval.matrix, by = c("cell type" = "cell.type", "method")) %>%
filter(
method %in% merged$method[grepl(merged$method, pattern = "tpm")]
)
df$`cell type` <- factor(df$`cell type`, levels = ct_levels)
p <- df %>%
ggplot(aes(x = `cell type`, y = sample, color = R, size = 1/RMSD)) +
geom_point() +
theme_bw() +
scale_color_viridis_c(option = "magma", direction = -1) +
facet_wrap(~method, ncol = 5) +
theme(
panel.grid = element_blank(),
axis.text = element_text(color = "black"),
axis.title = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
strip.text = element_text(face = "bold", size = 10)
)
ggsave(paste0(outdir, "method_ct_sample_performance.png"), p, width = 14, height = 3.5)
# Dotplot by cell type, sample and method
df <- full_join(merged, Eval.matrix, by = c("cell type" = "cell.type", "method")) %>%
filter(
method %in% merged$method[grepl(merged$method, pattern = "tpm")]
)
df$`cell type` <- factor(df$`cell type`, levels = ct_levels)
p <- df %>%
ggplot(aes(x = `cell type`, y = sample, color = R, size = 1/RMSD)) +
geom_point() +
theme_bw() +
scale_color_viridis_c(option = "magma", direction = -1) +
facet_wrap(~method, ncol = 4) +
theme(
panel.grid = element_blank(),
axis.text = element_text(color = "black"),
axis.title = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
strip.text = element_text(face = "bold", size = 10)
)
ggsave(paste0(outdir, "method_ct_sample_performance.png"), p, width = 14, height = 3.5)
ggsave(paste0(outdir, "method_ct_sample_performance.png"), p, width = 12, height = 7)
# Heatmap by method, cell type and metric
mat1 <- Eval.matrix %>%
dplyr::select(c("cell.type", "method", "R")) %>%
pivot_wider(names_from = "cell.type", values_from = R) %>%
column_to_rownames(var = "method")
mat2 <- Eval.matrix %>%
dplyr::select(c("cell.type", "method", "RMSD")) %>%
pivot_wider(names_from = "cell.type", values_from = RMSD) %>%
column_to_rownames(var = "method")
mat3 <- Eval.matrix %>%
dplyr::select(c("cell.type", "method", "mAD")) %>%
pivot_wider(names_from = "cell.type", values_from = mAD) %>%
column_to_rownames(var = "method")
pdf(paste0(outdir, "heat_Pearson.pdf"), width = 8, height = 5)
Heatmap(
mat1,
col = RColorBrewer::brewer.pal(9,"Blues"),
name = "Pearson",
cluster_rows = F,
cluster_columns = F,
row_names_side = "left",
row_names_gp = gpar(fontsize = 10),
column_names_gp = gpar(fontsize = 10)
)
dev.off()
pdf(paste0(outdir, "heat_RMSD.pdf"), width = 8, height = 5)
Heatmap(
mat2,
col = RColorBrewer::brewer.pal(9,"Blues"),
name = "RMSD",
cluster_rows = F,
cluster_columns = F,
row_names_side = "left",
row_names_gp = gpar(fontsize = 10),
column_names_gp = gpar(fontsize = 10)
)
dev.off()
pdf(paste0(outdir, "heat_mAD.pdf"), width = 8, height = 5)
Heatmap(
mat3,
col = RColorBrewer::brewer.pal(9,"Blues"),
name = "mAD",
cluster_rows = F,
cluster_columns = F,
row_names_side = "left",
row_names_gp = gpar(fontsize = 10),
column_names_gp = gpar(fontsize = 10)
)
dev.off()
