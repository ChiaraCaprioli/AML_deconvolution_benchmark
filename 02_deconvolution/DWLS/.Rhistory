# Libraries
# install.packages("DWLS")
library(DWLS)
library(Seurat)
library(Biobase)
library(ggpubr)
library(tidyverse)
# Utils
wdir <- "~/Desktop/working/bulk_ct_deconvolution/benchmarking/"
outdir <- paste0(wdir, "DWLS/")
if (!dir.exists(outdir)) {
dir.create(outdir)
}
wdir <- "~/Desktop/working/bulk_ct_deconvolution/"
outdir <- paste0(wdir, "benchmarking/DWLS/")
if (!dir.exists(outdir)) {
dir.create(outdir)
}
wdir
pb_summed <- readRDS(paste0(wdir, "sc_reference/pb_data_sample_es_summed.rds"))
bulk.mtx.summed = exprs(pb_summed)
pb_tpm <- readRDS(paste0(wdir, "sc_reference/pb_data_sample_es_tpm.rds"))
bulk.mtx.tpm = exprs(pb_tpm)
head(bulk.mtx.tpm)
head(bulk.mtx.summed)
cor.test(bulk.mtx.summed[,1], bulk.mtx.tpm[,1], method = "pearson")
plot(bulk.mtx.summed[,1], bulk.mtx.tpm[,1])
x = rowMeans(bulk.mtx.summed)
x
y = rowMeans(bulk.mtx.tpm)
cor.test(x,y, method = "pearson")
plot(x,y)
cor.test(x,y, method = "spearman")
?cor.test
cor.test(x,y, method = "spearman", exact = F)
## Single-cell
seurat <- readRDS(paste0(wdir, "sc_reference/sc_reference_sample.rds"))
signature_mast <- buildSignatureMatrixUsingSeurat( ### positive markers by Seurat::FindMarkers (MAST method)
scdata = as.matrix(seurat@assays$RNA@counts),
id = seurat$aggregated_lineage2,
path = outdir,
diff.cutoff = 0.5,
pval.cutoff = 0.01
)
P <- readRDS("~/Desktop/P.rds")
scC <- readRDS("~/Desktop/scC.rds")
T <- readRDS("~/Desktop/T.rds")
class(scC)
dim(scC)
scC[1:10,1:10]
class(P)
dim(P)
P
dim(T)
T[1:10,]
class(signature_mast)
bulk.mtx.summed
b = setNames(x, rownames(bulk.mtx.summed))
b
colnames(bulk.mtx.summed)
x = "AML4"
b = setNames(x, rownames(bulk.mtx.summed))
x = bulk.mtx.summed[,1]
x
b = setNames(x, rownames(bulk.mtx.summed))
b
names(x)
DWLS::trimData()
tr <- trimData(signature_mast, b)
tr
tr$bulk
tr$sig
tr$sig %>% head()
RES <- t(solveDampenedWLS(tr$sig, tr$bulk))
RES
rownames(RESULTS) <- colnames(tr$sig)
rownames(est.prop) <- colnames(tr$sig)
rownames(RES) <- colnames(tr$sig)
est.prop <- apply(bulk.mtx.summed, 2, function(x){
b = setNames(x, rownames(bulk.mtx.summed))
tr <- trimData(signature_mast, b)
RES <- t(solveDampenedWLS(tr$sig, tr$bulk))
})
RES = apply(RES,2,function(x) ifelse(x < 0, 0, x)) #explicit non-negativity constraint
RES
rownames(est.prop) <- colnames(tr$sig)
est.prop
est.prop = apply(est.prop,2,function(x) ifelse(x < 0, 0, x)) #explicit non-negativity constraint
x = est.prop[,1]
x
x/sum(x)
sum(x)
apply(est.prop,2,sum)
est.prop = apply(est.prop,2,function(x) x/sum(x)) #explicit STO constraint
MuSiC_proportions <- readRDS("~/Desktop/working/bulk_ct_deconvolution/benchmarking/MuSiC/MuSiC_proportions.rds")
MuSiC_proportions$direct_no_markers_summed
est.prop
est.prop <- t(est.prop)
saveRDS(est.prop, paste0(outdir, "/DWLS_proportions.rds"))
outdir
outdir2 <- paste0(wdir, "benchmarking/results")
outdir2
# Utils
wdir <- "~/Desktop/working/bulk_ct_deconvolution/"
outdir2 <- paste0(wdir, "benchmarking/results")
outdir2
list.files(
wdir,
pattern = "proportions"
)
list.files(
wdir,
pattern = "proportions.rds"
)
list.files(
wdir,
pattern = "_proportions.rds"
)
wdir <- "~/Desktop/working/bulk_ct_deconvolution/benchmarking/results/"
list.files(
wdir,
pattern = "_proportions.rds"
)
list.files(
wdir,
pattern = "proportions"
)
L_prop <- readRDS(
paste0(wdir,   list.files(
wdir,
pattern = "proportions"
))
)
paste0(wdir,
list.files(
wdir,
pattern = "proportions"
)
)
L_prop <- readRDS(
paste0(wdir,
list.files(
wdir,
pattern = "proportions"
)
)
)
L_prop <- list(readRDS(
paste0(wdir,
list.files(
wdir,
pattern = "proportions"
)
)
)
)
?list.files
paste0(wdir,
list.files(
wdir,
pattern = "proportions"
)
)
wdir <- "/Users/ieo4874/Desktop/working/bulk_ct_deconvolution/benchmarking/results/"
L_prop <- list(
readRDS(
paste0(wdir,
list.files(
wdir,
pattern = "proportions"
)
)
)
)
paste0(wdir,
list.files(
wdir,
pattern = "proportions"
)
)
wdir <- "/Users/ieo4874/Desktop/working/bulk_ct_deconvolution/benchmarking/results/"
list.files(wdir, pattern = "proportions")
paste0(wdir, list.files(wdir, pattern = "proportions"))
files <- paste0(wdir, list.files(wdir, pattern = "proportions"))
L_prop <- list()
for (f in files) {
res <- readRDS(f)
L_prop[[f]] <- res
}
files <- paste0(wdir, list.files(wdir, pattern = "proportions"))
files
basename(files)
files <- list(paste0(wdir, list.files(wdir, pattern = "proportions")))
files
files[[1]]
files <-  paste0(wdir, list.files(wdir, pattern = "proportions"))
files
files[[1]]
lapply(files, function(x){
res <- readRDS(x)
})
L_prop <- lapply(files, function(x){
res <- readRDS(x)
})
names(L_prop)
L_prop
L_prop[[1]]
lengths(L_prop[[2]])
basename(files)
str_remove_all(basename(files), pattern = "_")
?gsub
sub(" _.*", "", basename(files))
gsub( "_.*$", "", basename(files))
L_prop <- lapply(files, function(x){
res <- readRDS(x)
names(res) <- gsub("_.*$", "", basename(x))
})
L_prop[[1]]
names(L_prop)
L_prop <- lapply(files, function(x){
res <- readRDS(x)
})
names(L_prop) <- gsub("_.*$", "", basename(files))
# Load real proportions
pb_reference_prop <- readRDS("~/Desktop/working/bulk_ct_deconvolution/sc_reference/pb_data_sample.rds")
pb_reference_prop
colnames(pb_reference_prop$prop.real)
length(L_prop$MuSiC)
names(L_prop$MuSiC)
names(L_prop)[1]
# Global performance
eval_cross_modalities <- Eval_multi(
prop.real = data.matrix(pb_reference_prop$prop.real),
prop.est = list(
L_prop$DWLS,
L_prop$MuSiC$direct_no_markers_summed, L_prop$MuSiC$direct_no_markers_tpm,
L_prop$MuSiC$direct_markers_summed, L_prop$MuSiC$direct_markers_tpm,
L_prop$MuSiC$recursive_no_markers_summed, L_prop$MuSiC$recursive_no_markers_tpm,
L_prop$MuSiC$recursive_markers_summed, L_prop$MuSiC$recursive_markers_tpm
),
method.name = c(names(L_prop)[1], paste(names(L_prop)[1], names(L_prop$MuSiC), sep = "_"))
)
# Global performance
eval_cross_modalities <- MuSiC::Eval_multi(
prop.real = data.matrix(pb_reference_prop$prop.real),
prop.est = list(
L_prop$DWLS,
L_prop$MuSiC$direct_no_markers_summed, L_prop$MuSiC$direct_no_markers_tpm,
L_prop$MuSiC$direct_markers_summed, L_prop$MuSiC$direct_markers_tpm,
L_prop$MuSiC$recursive_no_markers_summed, L_prop$MuSiC$recursive_no_markers_tpm,
L_prop$MuSiC$recursive_markers_summed, L_prop$MuSiC$recursive_markers_tpm
),
method.name = c(names(L_prop)[1], paste(names(L_prop)[1], names(L_prop$MuSiC), sep = "_"))
)
eval_cross_modalities
# Global performance
eval_cross_modalities <- MuSiC::Eval_multi(
prop.real = data.matrix(pb_reference_prop$prop.real),
prop.est = list(
L_prop$DWLS,
L_prop$MuSiC$direct_no_markers_summed, L_prop$MuSiC$direct_no_markers_tpm,
L_prop$MuSiC$direct_markers_summed, L_prop$MuSiC$direct_markers_tpm,
L_prop$MuSiC$recursive_no_markers_summed, L_prop$MuSiC$recursive_no_markers_tpm,
L_prop$MuSiC$recursive_markers_summed, L_prop$MuSiC$recursive_markers_tpm
),
method.name = c(names(L_prop)[1], paste(names(L_prop)[2], names(L_prop$MuSiC), sep = "_"))
)
eval_cross_modalities
