library(ggpubr)
library(ComplexHeatmap)
})
wdir <- "/Users/ieo4874/Desktop/working/bulk_ct_deconvolution/"
source(paste0(wdir, "utils.R"))
path_res <- paste0(wdir, "deconvolution/results/")
outdir <- paste0(wdir, "benchmarking/results/")
colors <- list()
colors$metric <- setNames(
c(RColorBrewer::brewer.pal(9,"Greys")[c(3,5,7)]),
c("R", "RMSD", "mAD")
)
ct_levels <- c("HSC_MPP", "Early_myeloid", "Late_myeloid", "Erythroid", "Eo_baso_mast", "Mono", "DC", "T_CD4", "T_CD8", "NK_cells", "B_early", "B_mature")
# Load real proportions
real_prop <- readRDS(paste0(wdir, "sc_reference/pb_data_sample.rds"))
real_prop <- real_prop$prop.real
# Load estimated proportions
est_prop <- LoadDeconvolutionResults(path = path_res)
eval_cross_modalities <- Eval_multi(
prop.real = data.matrix(real_prop),
prop.est = c(
est_prop$Bisque.refbased,
est_prop$CIBERSORTx,
est_prop$DWLS,
est_prop$MuSiC.direct,
est_prop$MuSiC.recursive
),
method.name = c(
paste(names(est_prop)[1], names(est_prop[[1]]), sep = "_"),
paste(names(est_prop)[2], names(est_prop[[2]]), sep = "_"),
paste(names(est_prop)[3], names(est_prop[[3]]), sep = "_"),
paste(names(est_prop)[4], names(est_prop[[4]]), sep = "_"),
paste(names(est_prop)[5], names(est_prop[[5]]), sep = "_")
)
)
est_prop$CIBERSORTx$CIBERSORTx_summed_no_batch
is.numeric(est_prop$CIBERSORTx$CIBERSORTx_summed_no_batch)
is.numeric(est_prop$DWLS$summed)
x <- read_delim(paste0(path, f), show_col_types = FALSE)
x <- x[,1:(ncol(x)-4)] %>%
column_to_rownames(var = "Mixture")
x <- x/rowSums(x) # normalize to 1
x
is.numeric(x)
mode(x) <- "numeric"
class(x)
foo <- as.matrix(x)
is.numeric(foo)
###################### Process CIBERSORTx output ######################
LoadCibersortx <- function(path) {
files <- list.files(path = path, pattern = "CIBERSORTx_")
L_save <- list()
for (f in files) {
x <- read_delim(paste0(path, f), show_col_types = FALSE)
x <- x[,1:(ncol(x)-4)] %>%
column_to_rownames(var = "Mixture")
x <- as.matrix(x/rowSums(x)) # normalize to 1
L_save[[f]] <- x
}
names(L_save) <- gsub(".txt*$", "", basename(files))
return(L_save)
}
### Process CIBERSORTX output ###
res <- LoadCibersortx(path = "~/Desktop/working/bulk_ct_deconvolution/deconvolution/CIBERSORTx/")
res$CIBERSORTx_summed_no_batch
is.numeric(res$CIBERSORTx_summed_no_batch)
saveRDS(res, "~/Desktop/working/bulk_ct_deconvolution/deconvolution/results/CIBERSORTx_proportions.rds")
suppressPackageStartupMessages({
library(tidyverse)
library(MuSiC)
library(ggpubr)
library(ComplexHeatmap)
})
wdir <- "/Users/ieo4874/Desktop/working/bulk_ct_deconvolution/"
source(paste0(wdir, "utils.R"))
path_res <- paste0(wdir, "deconvolution/results/")
outdir <- paste0(wdir, "benchmarking/results/")
colors <- list()
colors$metric <- setNames(
c(RColorBrewer::brewer.pal(9,"Greys")[c(3,5,7)]),
c("R", "RMSD", "mAD")
)
ct_levels <- c("HSC_MPP", "Early_myeloid", "Late_myeloid", "Erythroid", "Eo_baso_mast", "Mono", "DC", "T_CD4", "T_CD8", "NK_cells", "B_early", "B_mature")
# Load real proportions
real_prop <- readRDS(paste0(wdir, "sc_reference/pb_data_sample.rds"))
real_prop <- real_prop$prop.real
# Load estimated proportions
est_prop <- LoadDeconvolutionResults(path = path_res)
eval_cross_modalities <- Eval_multi(
prop.real = data.matrix(real_prop),
prop.est = c(
est_prop$Bisque.refbased,
est_prop$CIBERSORTx,
est_prop$DWLS,
est_prop$MuSiC.direct,
est_prop$MuSiC.recursive
),
method.name = c(
paste(names(est_prop)[1], names(est_prop[[1]]), sep = "_"),
paste(names(est_prop)[2], names(est_prop[[2]]), sep = "_"),
paste(names(est_prop)[3], names(est_prop[[3]]), sep = "_"),
paste(names(est_prop)[4], names(est_prop[[4]]), sep = "_"),
paste(names(est_prop)[5], names(est_prop[[5]]), sep = "_")
)
)
write.table(eval_cross_modalities, paste0(outdir, "/global_performance.tsv"), row.names = T)
eval_cross_modalities
eval_cross_modalities <- Eval_multi(
prop.real = data.matrix(real_prop),
prop.est = c(
est_prop$Bisque.refbased,
est_prop$CIBERSORTx,
est_prop$DWLS,
est_prop$MuSiC.direct,
est_prop$MuSiC.recursive
),
method.name = c(
paste(names(est_prop)[1], names(est_prop[[1]]), sep = "_"),
paste(names(est_prop)[2], names(est_prop[[2]]), sep = "_"),
paste(names(est_prop)[3], names(est_prop[[3]]), sep = "_"),
paste(names(est_prop)[4], names(est_prop[[4]]), sep = "_"),
paste(names(est_prop)[5], names(est_prop[[5]]), sep = "_")
)
)
write.table(eval_cross_modalities, paste0(outdir, "/global_performance.tsv"), row.names = T)
p <- eval_cross_modalities %>%
as.data.frame() %>%
rownames_to_column(var = "method") %>%
pivot_longer(2:ncol(.), names_to = "metric", values_to = "value") %>%
ggplot(aes(x = method, y = value, fill = metric)) +
geom_col(position = "dodge", color = "black", linewidth = 0.3) +
xlab("Method") + ylab("Score") +
scale_x_discrete(limits=rev) +
scale_fill_manual(name = "Metric", values = colors$metric) +
theme_bw() +
theme(
panel.grid = element_blank(),
aspect.ratio = 1,
axis.title.y = element_blank(),
axis.text = element_text(color = "black")
) +
coord_flip()
ggsave(paste0(outdir, "global_performance.png"), p, width = 7, height = 5)
# Compute R, RMSD and mAD by method and cell type across samples
x <- reshape2::melt(est_prop)
x$method <- paste(x$L1, x$L2, sep = "_")
x$L1 <- NULL
x$L2 <- NULL
colnames(x) <- c("sample", "cell type", "estimated", "method")
y <- reshape2::melt(real_prop)
colnames(y) <- c("sample", "cell type", "observed")
merged <- full_join(x,y)
merged$`cell type` <- factor(merged$`cell type`, levels = ct_levels)
Eval.matrix <- NULL
L_plots <- list()
for (c in levels(merged$`cell type`)) {
for (m in unique(merged$method)) {
df <- merged %>%
filter(
method == m,
`cell type` == c
)
eval <- data.frame(
`cell type` = c,
method = m,
RMSD = round(sqrt(mean((df$observed - df$estimated)^2)), digits = 5),
mAD = round(mean(abs(df$observed - df$estimated)), digits = 5),
R = round(cor(c(df$observed), c(df$estimated), method = "pearson"), digits = 4)
)
Eval.matrix <- rbind(Eval.matrix, eval)
}
}
# Boxplot by method and metric
p <- Eval.matrix %>%
pivot_longer(cols = c(R, RMSD, mAD), names_to = "metric", values_to = "score") %>%
mutate(metric = factor(metric, levels = c("R", "RMSD", "mAD"))) %>%
ggplot(aes(x = method, y = score, fill = metric)) +
geom_boxplot(position = "dodge", outlier.size = 0, outlier.alpha = 0) +
scale_x_discrete(limits=rev) +
scale_fill_manual(name = "Metric", values = colors$metric) +
theme_bw() +
ylab("Score") +
coord_flip() +
theme(
panel.grid = element_blank(),
axis.title.y = element_blank(),
aspect.ratio = 1,
axis.text = element_text(color = "black")
)
ggsave(paste0(outdir, "ct_performance.png"), p, width = 7, height = 5)
eval_cross_modalities
min(eval_cross_modalities[,1])
min(eval_cross_modalities[,2])
max(eval_cross_modalities[,3])
nrow(eval_cross_modalities)
# Dotplot by cell type, sample and method
df <- full_join(merged, Eval.matrix, by = c("cell type" = "cell.type", "method")) %>%
filter(
method %in% merged$method[grepl(merged$method, pattern = "tpm")]
)
df$`cell type` <- factor(df$`cell type`, levels = ct_levels)
p <- df %>%
ggplot(aes(x = `cell type`, y = sample, color = R, size = 1/RMSD)) +
geom_point() +
theme_bw() +
scale_color_viridis_c(option = "magma", direction = -1) +
facet_wrap(~method, ncol = 3) +
theme(
panel.grid = element_blank(),
axis.text = element_text(color = "black"),
axis.title = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
strip.text = element_text(face = "bold", size = 10)
)
ggsave(paste0(outdir, "method_ct_sample_performance.png"), p, width = 12, height = 7)
# Heatmap by method, cell type and metric
mat1 <- Eval.matrix %>%
dplyr::select(c("cell.type", "method", "R")) %>%
pivot_wider(names_from = "cell.type", values_from = R) %>%
column_to_rownames(var = "method")
mat2 <- Eval.matrix %>%
dplyr::select(c("cell.type", "method", "RMSD")) %>%
pivot_wider(names_from = "cell.type", values_from = RMSD) %>%
column_to_rownames(var = "method")
mat3 <- Eval.matrix %>%
dplyr::select(c("cell.type", "method", "mAD")) %>%
pivot_wider(names_from = "cell.type", values_from = mAD) %>%
column_to_rownames(var = "method")
pdf(paste0(outdir, "heat_Pearson.pdf"), width = 8, height = 5)
Heatmap(
mat1,
col = RColorBrewer::brewer.pal(9,"Blues"),
name = "Pearson",
cluster_rows = F,
cluster_columns = F,
row_names_side = "left",
row_names_gp = gpar(fontsize = 10),
column_names_gp = gpar(fontsize = 10)
)
dev.off()
pdf(paste0(outdir, "heat_RMSD.pdf"), width = 8, height = 5)
Heatmap(
mat2,
col = RColorBrewer::brewer.pal(9,"Blues"),
name = "RMSD",
cluster_rows = F,
cluster_columns = F,
row_names_side = "left",
row_names_gp = gpar(fontsize = 10),
column_names_gp = gpar(fontsize = 10)
)
dev.off()
pdf(paste0(outdir, "heat_mAD.pdf"), width = 8, height = 5)
Heatmap(
mat3,
col = RColorBrewer::brewer.pal(9,"Blues"),
name = "mAD",
cluster_rows = F,
cluster_columns = F,
row_names_side = "left",
row_names_gp = gpar(fontsize = 10),
column_names_gp = gpar(fontsize = 10)
)
dev.off()
# Heatmap by method, cell type and metric
mat1 <- Eval.matrix %>%
dplyr::select(c("cell.type", "method", "R")) %>%
pivot_wider(names_from = "cell.type", values_from = R) %>%
column_to_rownames(var = "method")
mat2 <- Eval.matrix %>%
dplyr::select(c("cell.type", "method", "RMSD")) %>%
pivot_wider(names_from = "cell.type", values_from = RMSD) %>%
column_to_rownames(var = "method")
mat3 <- Eval.matrix %>%
dplyr::select(c("cell.type", "method", "mAD")) %>%
pivot_wider(names_from = "cell.type", values_from = mAD) %>%
column_to_rownames(var = "method")
pdf(paste0(outdir, "heat_Pearson.pdf"), width = 9, height = 4)
Heatmap(
mat1,
col = RColorBrewer::brewer.pal(9,"Blues"),
name = "Pearson",
cluster_rows = F,
cluster_columns = F,
row_names_side = "left",
row_names_gp = gpar(fontsize = 10),
column_names_gp = gpar(fontsize = 10)
)
dev.off()
pdf(paste0(outdir, "heat_RMSD.pdf"), width = 9, height = 4)
Heatmap(
mat2,
col = RColorBrewer::brewer.pal(9,"Blues"),
name = "RMSD",
cluster_rows = F,
cluster_columns = F,
row_names_side = "left",
row_names_gp = gpar(fontsize = 10),
column_names_gp = gpar(fontsize = 10)
)
dev.off()
pdf(paste0(outdir, "heat_mAD.pdf"), width = 9, height = 4)
Heatmap(
mat3,
col = RColorBrewer::brewer.pal(9,"Blues"),
name = "mAD",
cluster_rows = F,
cluster_columns = F,
row_names_side = "left",
row_names_gp = gpar(fontsize = 10),
column_names_gp = gpar(fontsize = 10)
)
dev.off()
pdf(paste0(outdir, "heat_Pearson.pdf"), width = 10, height = 5)
Heatmap(
mat1,
col = RColorBrewer::brewer.pal(9,"Blues"),
name = "Pearson",
cluster_rows = F,
cluster_columns = F,
row_names_side = "left",
row_names_gp = gpar(fontsize = 10),
column_names_gp = gpar(fontsize = 10)
)
dev.off()
pdf(paste0(outdir, "heat_Pearson.pdf"), width = 10, height = 5)
Heatmap(
mat1,
col = RColorBrewer::brewer.pal(9,"Blues"),
name = "Pearson",
cluster_rows = F,
cluster_columns = F,
row_names_side = "left",
row_names_gp = gpar(fontsize = 10),
column_names_gp = gpar(fontsize = 10)
)
dev.off()
pdf(paste0(outdir, "heat_Pearson.pdf"), width = 5, height = 5)
Heatmap(
mat1,
col = RColorBrewer::brewer.pal(9,"Blues"),
name = "Pearson",
cluster_rows = F,
cluster_columns = F,
row_names_side = "left",
row_names_gp = gpar(fontsize = 10),
column_names_gp = gpar(fontsize = 10)
)
dev.off()
pdf(paste0(outdir, "heat_Pearson.pdf"), width = 8, height = 5)
Heatmap(
mat1,
col = RColorBrewer::brewer.pal(9,"Blues"),
name = "Pearson",
cluster_rows = F,
cluster_columns = F,
row_names_side = "left",
row_names_gp = gpar(fontsize = 10),
column_names_gp = gpar(fontsize = 10)
)
dev.off()
pdf(paste0(outdir, "heat_Pearson.pdf"), width = 15, height = 5)
Heatmap(
mat1,
col = RColorBrewer::brewer.pal(9,"Blues"),
name = "Pearson",
cluster_rows = F,
cluster_columns = F,
row_names_side = "left",
row_names_gp = gpar(fontsize = 10),
column_names_gp = gpar(fontsize = 10)
)
dev.off()
pdf(paste0(outdir, "heat_Pearson.pdf"), width = 8, height = 3)
Heatmap(
mat1,
col = RColorBrewer::brewer.pal(9,"Blues"),
name = "Pearson",
cluster_rows = F,
cluster_columns = F,
row_names_side = "left",
row_names_gp = gpar(fontsize = 10),
column_names_gp = gpar(fontsize = 10)
)
dev.off()
pdf(paste0(outdir, "heat_Pearson.pdf"), width = 6, height = 3)
Heatmap(
mat1,
col = RColorBrewer::brewer.pal(9,"Blues"),
name = "Pearson",
cluster_rows = F,
cluster_columns = F,
row_names_side = "left",
row_names_gp = gpar(fontsize = 10),
column_names_gp = gpar(fontsize = 10)
)
dev.off()
pdf(paste0(outdir, "heat_Pearson.pdf"), width = 6, height = 3)
Heatmap(
mat1,
col = RColorBrewer::brewer.pal(9,"Blues"),
name = "Pearson",
cluster_rows = F,
cluster_columns = F,
row_names_side = "left",
row_names_gp = gpar(fontsize = 8),
column_names_gp = gpar(fontsize = 8)
)
dev.off()
pdf(paste0(outdir, "heat_Pearson.pdf"), width = 7, height = 3)
Heatmap(
mat1,
col = RColorBrewer::brewer.pal(9,"Blues"),
name = "Pearson",
cluster_rows = F,
cluster_columns = F,
row_names_side = "left",
row_names_gp = gpar(fontsize = 8),
column_names_gp = gpar(fontsize = 8)
)
dev.off()
# Heatmap by method, cell type and metric
mat1 <- Eval.matrix %>%
dplyr::select(c("cell.type", "method", "R")) %>%
pivot_wider(names_from = "cell.type", values_from = R) %>%
column_to_rownames(var = "method")
mat2 <- Eval.matrix %>%
dplyr::select(c("cell.type", "method", "RMSD")) %>%
pivot_wider(names_from = "cell.type", values_from = RMSD) %>%
column_to_rownames(var = "method")
mat3 <- Eval.matrix %>%
dplyr::select(c("cell.type", "method", "mAD")) %>%
pivot_wider(names_from = "cell.type", values_from = mAD) %>%
column_to_rownames(var = "method")
pdf(paste0(outdir, "heat_Pearson.pdf"), width = 7, height = 3.5)
Heatmap(
mat1,
col = RColorBrewer::brewer.pal(9,"Blues"),
name = "Pearson",
cluster_rows = F,
cluster_columns = F,
row_names_side = "left",
row_names_gp = gpar(fontsize = 8),
column_names_gp = gpar(fontsize = 8)
)
dev.off()
pdf(paste0(outdir, "heat_RMSD.pdf"), width = 7, height = 3.5)
Heatmap(
mat2,
col = RColorBrewer::brewer.pal(9,"Blues"),
name = "RMSD",
cluster_rows = F,
cluster_columns = F,
row_names_side = "left",
row_names_gp = gpar(fontsize = 8),
column_names_gp = gpar(fontsize = 8)
)
dev.off()
pdf(paste0(outdir, "heat_mAD.pdf"), width = 7, height = 3.5)
Heatmap(
mat3,
col = RColorBrewer::brewer.pal(9,"Blues"),
name = "mAD",
cluster_rows = F,
cluster_columns = F,
row_names_side = "left",
row_names_gp = gpar(fontsize = 8),
column_names_gp = gpar(fontsize = 8)
)
dev.off()
res <- LoadCibersortx(path = "~/Desktop/working/bulk_ct_deconvolution/deconvolution/CIBERSORTx/")
saveRDS(res, "~/Desktop/working/bulk_ct_deconvolution/deconvolution/results/CIBERSORTx_proportions.rds")
suppressPackageStartupMessages({
library(tidyverse)
library(MuSiC)
library(ggpubr)
library(ComplexHeatmap)
})
wdir <- "/Users/ieo4874/Desktop/working/bulk_ct_deconvolution/"
source(paste0(wdir, "utils.R"))
path_res <- paste0(wdir, "deconvolution/results/")
outdir <- paste0(wdir, "benchmarking/results/")
colors <- list()
colors$metric <- setNames(
c(RColorBrewer::brewer.pal(9,"Greys")[c(3,5,7)]),
c("R", "RMSD", "mAD")
)
ct_levels <- c("HSC_MPP", "Early_myeloid", "Late_myeloid", "Erythroid", "Eo_baso_mast", "Mono", "DC", "T_CD4", "T_CD8", "NK_cells", "B_early", "B_mature")
# Load real proportions
real_prop <- readRDS(paste0(wdir, "sc_reference/pb_data_sample.rds"))
real_prop <- real_prop$prop.real
# Load estimated proportions
est_prop <- LoadDeconvolutionResults(path = path_res)
eval_cross_modalities <- Eval_multi(
prop.real = data.matrix(real_prop),
prop.est = c(
est_prop$Bisque.refbased,
est_prop$CIBERSORTx,
est_prop$DWLS,
est_prop$MuSiC.direct,
est_prop$MuSiC.recursive
),
method.name = c(
paste(names(est_prop)[1], names(est_prop[[1]]), sep = "_"),
paste(names(est_prop)[2], names(est_prop[[2]]), sep = "_"),
paste(names(est_prop)[3], names(est_prop[[3]]), sep = "_"),
paste(names(est_prop)[4], names(est_prop[[4]]), sep = "_"),
paste(names(est_prop)[5], names(est_prop[[5]]), sep = "_")
)
)
write.table(eval_cross_modalities, paste0(outdir, "/global_performance.tsv"), row.names = T)
eval_cross_modalities
